name: Deploy e_comm App on EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted  

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            admin/package-lock.json

# ================= Backend =================
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Create backend .env file
        working-directory: ./backend
        run: |
          cat <<'EOF' > .env
          ${{ secrets.PROD_BACKEND_ENV }}
          EOF

      - name: Start backend with PM2
        working-directory: ./backend
        run: |
          /home/ubuntu/.nvm/versions/node/v22.18.0/bin/pm2 restart e_comm_backend || /home/ubuntu/.nvm/versions/node/v22.18.0/bin/pm2 start index.js --name e_comm_backend

# ================= Frontend =================
      - name: Clean npm cache & remove existing dependencies (Frontend)
        working-directory: ./frontend
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Create frontend .env file
        working-directory: ./frontend
        run: |
          cat <<'EOF' > .env
          ${{ secrets.PROD_FRONTEND_ENV }}
          EOF

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Deploy frontend to Nginx
        run: |
          sudo rm -rf /var/www/html/*
          sudo cp -r ./frontend/dist/* /var/www/html/

# ================= Admin =================
      - name: Clean npm cache & remove existing dependencies (Admin)
        working-directory: ./admin
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: Install admin dependencies
        working-directory: ./admin
        run: npm install

      - name: Create admin .env file
        working-directory: ./admin
        run: |
          cat <<'EOF' > .env
          ${{ secrets.PROD_ADMIN_ENV }}
          EOF

      - name: Build admin
        working-directory: ./admin
        run: npm run build

      - name: Deploy admin to Nginx
        run: |
          sudo rm -rf /var/www/html/admin/*
          sudo mkdir -p /var/www/html/admin
          sudo cp -r ./admin/dist/* /var/www/html/admin/
